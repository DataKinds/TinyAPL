⍝⍝ std:bitwise: Two's complement bitwise operations

PadStart ↚ {⍵⍪⍨0⍴⍨0⌈⍺-≢⍵}

⍝⍝ Turn a number into a list of bits
Encode ⇇ ⊤

⍝⍝ Turn a list of bits into a number
Decode ⇇ ⊥

⍝⍝ Bitwise NOT (~)
Not ⇇ 1∘+⍛-

_BinaryOp ↚ _{ a←Encode ⍺ ⋄ w←Encode ⍵ ⋄ l←a⌈⍥≢w⋄ Decode a ⍶⍶⍥(l∘PadStart) w }

_NegativeCasesBinary ↚ _{ ⟨pp⋄pn⋄np⋄nn⟩←⍺⍺ ⋄ s←0>⍺⍮⍵ ⋄ 0‿0≡s: ■⍺ ⊐pp ⍵ ⋄ 0‿1≡s: ■⍺ ⊐pn ⍵ ⋄ 1‿0≡s: ■⍺ ⊐np ⍵ ⋄ 1‿1≡s: ■⍺ ⊐nn ⍵ ⋄ ↗"Unreachable" }

⍝⍝ Bitwise AND (∧)
And ⇇ ⟨∧_BinaryOp ⋄ ≠_BinaryOp⇽(∧_BinaryOp∘Not) ⋄ Not⍛(∧_BinaryOp)⇾(≠_BinaryOp) ⋄ Not⍤(∨_BinaryOp⍥Not)⟩_NegativeCasesBinary

⍝⍝ Bitwise OR (∨)
Or ⇇ Not⍤And⍥Not

⍝⍝ Bitwise XOR (≠)
Xor ⇇ ⦅Or⋄And∘Not⋄And⦆

⍝⍝ Bitwise NAND (⍲)
Nand ⇇ Not⍤And

⍝⍝ Bitwise NOR (⍱)
Nor ⇇ Not⍤Or

⍝⍝ Bitwise XNOR (=)
Xnor ⇇ Not⍤Xor

⍝⍝ Bitwise implication (≤)
Imply ⇇ Not⍛Or

⍝⍝ Bitwise converse implication (≥)
Cimply ⇇ Or∘Not

⍝⍝ Bitwise non-implication (>)
Nimply ⇇ And∘Not

⍝⍝ Bitwise converse non-implication (<)
Cnimply ⇇ Not⍛And

⍝⍝ Apply a function bitwise
⍝⍝ ~: NOT
⍝⍝ ∧: AND
⍝⍝ ∨: OR
⍝⍝ ≠: XOR
⍝⍝ ⍲: NAND
⍝⍝ ⍱: NOR
⍝⍝ =: XNOR
⍝⍝ ≤: implication
⍝⍝ ≥: converse implication
⍝⍝ >: non-implication
⍝⍝ <: converse non-implication
_Bitwise ⇇ _⦅_{
  d←⎕Exists"⍺" ⋄ m←~d
⋄ _I ← _{(⊏⍶⍶)=⍵}
⋄ ⎕Exists "⍶⍶": f←⊏⍶⍶
⋄ ⎕Exists"⍺⍺": 3=⎕Type ⍺⍺: f←⍺⍺
⋄ ~⎕Exists"f": 2↗"operand should be a function"
⋄ m∧~_I f: ■Not ⍵
⋄ d∧∧_I f: ■⍺ And ⍵
⋄ d∧∨_I f: ■⍺ Or ⍵
⋄ d∧≠_I f: ■⍺ Xor ⍵
⋄ d∧⍲_I f: ■⍺ Nand ⍵
⋄ d∧⍱_I f: ■⍺ Nor ⍵
⋄ d∧=_I f: ■⍺ Xor ⍵
⋄ d∧≤_I f: ■⍺ Imply ⍵
⋄ d∧≥_I f: ■⍺ Cimply ⍵
⋄ d∧>_I f: ■⍺ Nimply ⍵
⋄ d∧<_I f: ■⍺ Cnimply ⍵
⋄ 2↗"invalid operand"
}⋄⌓ ⦆
